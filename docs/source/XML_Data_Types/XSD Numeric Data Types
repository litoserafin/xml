XSD Numeric Data Types
======================

1. **integer**  
   - **Definition**: Represents a whole number (both positive and negative) without any fractional part.
   - **Example**: <totalItems>150</totalItems>
   - **Usage**: Ideal for counting items, users, or other whole number quantities.

2. **nonPositiveInteger**  
   - **Definition**: Represents an integer less than or equal to zero (i.e., negative numbers or zero).
   - **Example**: <balance>-50</balance>
   - **Usage**: Used for representing negative or zero values, such as debt or balance.

3. **nonNegativeInteger**  
   - **Definition**: Represents an integer greater than or equal to zero (i.e., positive numbers or zero).
   - **Example**: <quantity>200</quantity>
   - **Usage**: Ideal for quantities that canâ€™t be negative (e.g., stock inventory).

4. **positiveInteger**  
   - **Definition**: Represents an integer greater than zero (i.e., positive whole numbers).
   - **Example**: <employees>25</employees>
   - **Usage**: Used for values that should always be positive, like a number of people or products.

5. **negativeInteger**  
   - **Definition**: Represents an integer less than zero (i.e., negative whole numbers).
   - **Example**: <temperature>-5</temperature>
   - **Usage**: Used when negative numbers are necessary, such as temperatures below freezing.

6. **long**  
   - **Definition**: Represents a large integer with a range of `-2^63` to `2^63-1`.
   - **Example**: <distance>1234567890123456789</distance>
   - **Usage**: Used for very large integers (e.g., large distances, population counts).

7. **int**  
   - **Definition**: Represents a 32-bit integer with a range of `-2^31` to `2^31-1`.
   - **Example**: <idNumber>4567</idNumber>
   - **Usage**: Suitable for regular integer values within the specified range.

8. **short**  
   - **Definition**: Represents a 16-bit integer with a range of `-2^15` to `2^15-1`.
   - **Example**: <age>35</age>
   - **Usage**: Useful for smaller integers (e.g., age, number of items in a small list).

9. **byte**  
   - **Definition**: Represents an 8-bit integer with a range of `-2^7` to `2^7-1`.
   - **Example**: <score>100</score>
   - **Usage**: Suitable for small numeric values that require fewer bits.

10. **decimal**  
    - **Definition**: Represents numbers with fractional parts, with high precision.
    - **Example**: <price>19.99</price>
    - **Usage**: Ideal for representing prices, financial data, or measurements that need high precision.

11. **float**  
    - **Definition**: Represents a single-precision floating point number (approx. 7 digits of precision).
    - **Example**: <temperature>36.6</temperature>
    - **Usage**: Suitable for storing decimal numbers with moderate precision, such as temperature readings.

12. **double**  
    - **Definition**: Represents a double-precision floating point number (approx. 15 digits of precision).
    - **Example**: <distance>3.14159265358979</distance>
    - **Usage**: Used for high-precision floating-point numbers, such as scientific calculations.

13. **unsignedLong**  
    - **Definition**: Represents an unsigned 64-bit integer with a range of `0` to `2^64-1`.
    - **Example**: <population>1250000000</population>
    - **Usage**: Used when only positive integers are needed, often for very large counts.

14. **unsignedInt**  
    - **Definition**: Represents an unsigned 32-bit integer with a range of `0` to `2^32-1`.
    - **Example**: <viewCount>3500</viewCount>
    - **Usage**: Suitable for non-negative integers within the specified range, like counts or IDs.

15. **unsignedShort**  
    - **Definition**: Represents an unsigned 16-bit integer with a range of `0` to `2^16-1`.
    - **Example**: <rating>200</rating>
    - **Usage**: Used for small, positive integers where negative values are not allowed.

16. **unsignedByte**  
    - **Definition**: Represents an unsigned 8-bit integer with a range of `0` to `2^8-1`.
    - **Example**: <grade>95</grade>
    - **Usage**: Used for small unsigned values, such as grades or scores.

Why Use XSD Numeric Data Types?
-------------------------------
- **Data Integrity**: Ensures numeric data is accurately captured and stored.
- **Flexibility**: Supports a wide variety of numeric types to meet different precision and size requirements.
- **Interoperability**: Facilitates smooth data exchange between systems, ensuring correct data parsing.

Tip: When choosing a numeric type, make sure to select the most suitable type for your data's range and precision needs!
